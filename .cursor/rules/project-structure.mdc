---
description:
globs:
alwaysApply: true
---
# Project Structure Documentation

## Project Tree Structure

```
apply-landing-page/
├── .bolt/
│   └── supabase_discarded_migrations/
│       ├── 20250811074136_shiny_sky.sql
│       └── 20250811100953_bold_haze.sql
├── .env                              # Environment variables (hidden)
├── .gitignore                        # Git ignore patterns (hidden)
├── components.json                   # shadcn/ui configuration
├── eslint.config.js                  # ESLint configuration
├── index.html                        # HTML entry point
├── netlify.toml                      # Netlify deployment configuration
├── package.json                      # Node.js dependencies and scripts
├── package-lock.json                 # Locked dependency versions (hidden)
├── postcss.config.js                 # PostCSS configuration
├── tailwind.config.js                # Tailwind CSS configuration
├── tsconfig.json                     # TypeScript configuration (main)
├── tsconfig.app.json                 # TypeScript configuration (app)
├── tsconfig.node.json                # TypeScript configuration (node)
├── vite.config.ts                    # Vite build configuration
├── docs/                             # Project documentation
│   ├── db-save-logic.md              # Database save logic documentation
│   ├── db-schema.md                  # Database schema documentation
│   ├── events.md                     # Meta Pixel events documentation
│   ├── project-structure.md          # This file - project structure guide
│   └── workflow-setup-v2.1.md        # Deployment workflow documentation
├── public/                           # Static assets
│   ├── bg-fav.jpg                    # Background favorite image
│   ├── bh ig logo.png                # Beacon House Instagram logo
│   ├── bh-logo.png                   # Beacon House logo
│   ├── heroImage.webp                # Hero section image
│   ├── karthik.png                   # Counselor profile image
│   ├── lastCTAsectionBG.webp         # Final CTA section background
│   └── vishy.png                     # Counselor profile image
├── src/                              # Source code
│   ├── App.tsx                       # Main application component
│   ├── index.css                     # Global CSS styles and Tailwind directives
│   ├── main.tsx                      # React application entry point
│   ├── vite-env.d.ts                 # Vite environment type declarations
│   ├── components/                   # React components
│   │   ├── FormPage.tsx              # Form container page layout
│   │   ├── Header.tsx                # Navigation header component
│   │   ├── LandingPage.tsx           # Main marketing landing page
│   │   ├── NotFound.tsx              # 404 error page component
│   │   ├── forms/                    # Form-specific components
│   │   │   ├── DisqualifiedLeadForm.tsx      # Page 2B - Contact form for disqualified leads
│   │   │   ├── FormContainer.tsx             # Main form orchestrator and flow manager
│   │   │   ├── InitialLeadCaptureForm.tsx    # Page 1 - Student info and preferences
│   │   │   └── QualifiedLeadForm.tsx         # Page 2A - Counseling booking for qualified leads
│   │   └── ui/                       # Reusable UI components
│   │       ├── SequentialLoadingAnimation.tsx # Custom loading animation
│   │       ├── button.tsx            # Button component with variants
│   │       ├── card.tsx              # Card container components
│   │       ├── dialog.tsx            # Modal dialog component
│   │       ├── input.tsx             # Enhanced input component
│   │       ├── label.tsx             # Form label component
│   │       ├── progress.tsx          # Progress bar component
│   │       ├── select.tsx            # Custom select dropdown
│   │       └── toast.tsx             # Toast notification system
│   ├── lib/                          # Utility libraries and business logic
│   │   ├── analytics.ts              # Google Analytics integration
│   │   ├── database.ts               # Supabase database operations
│   │   ├── dataValidation.ts         # Data validation utilities
│   │   ├── form.ts                   # Form submission and webhook integration
│   │   ├── formTracking.ts           # Incremental form data tracking
│   │   ├── formUtils.ts              # Form utilities (error handling, field focusing)
│   │   ├── leadCategorization.ts     # Business logic for lead qualification
│   │   ├── logger.ts                 # Conditional logging utility
│   │   ├── metaPixelEvents.ts        # Meta Pixel event tracking system
│   │   └── utils.ts                  # General utility functions
│   ├── schemas/                      # Validation schemas
│   │   └── form.ts                   # Zod validation schemas for forms
│   ├── store/                        # State management
│   │   └── formStore.ts              # Zustand store for form state
│   └── types/                        # TypeScript type definitions
│       └── form.ts                   # Form data type definitions and enums
└── supabase/                         # Supabase configuration and migrations
    └── migrations/                   # Database migration files
        ├── 20250805102940_bronze_sound.sql
        ├── 20250811091121_nameless_grass.sql
        ├── 20250811093250_warm_truth.sql
        ├── 20250811094843_dusty_bird.sql
        ├── 20250811095926_bronze_breeze.sql
        └── 20250811101126_silent_shrine.sql
```

### Key Directory Purposes

- **`src/components/`**: All React components, organized by functionality
- **`src/components/forms/`**: Form-specific components handling the 2-page application flow
- **`src/components/ui/`**: Reusable UI components built on Radix UI primitives
- **`src/lib/`**: Business logic, API integrations, and utility functions
- **`src/schemas/`**: Runtime validation schemas using Zod
- **`src/store/`**: Client-side state management using Zustand
- **`src/types/`**: TypeScript type definitions and interfaces
- **`docs/`**: Comprehensive project documentation
- **`public/`**: Static assets (images, logos, backgrounds)
- **`supabase/migrations/`**: Database schema evolution files

## Overview
This is a React TypeScript application built with Vite, featuring a simplified 2-page form system for university admissions lead capture. The application uses Supabase for database operations and integrates with Make.com for email automation.

## Tech Stack
- **Frontend Framework**: React 18.3.1 with TypeScript
- **Build Tool**: Vite 5.4.2
- **Styling**: Tailwind CSS 3.4.1 with custom design system
- **Database**: Supabase (PostgreSQL with RPC functions)
- **State Management**: Zustand 4.5.2
- **Form Handling**: React Hook Form 7.51.0 with Zod validation
- **UI Components**: Custom components built on Radix UI primitives
- **Routing**: React Router DOM 6.22.3
- **Deployment**: Netlify with branch-based deployments

---

## Root Configuration Files

### `package.json`
**Purpose**: Project dependencies and scripts management
**Dependencies**: React, TypeScript, Vite, Tailwind CSS, Supabase client, form libraries
**Tech Stack**: Node.js package management

### `vite.config.ts`
**Purpose**: Vite build tool configuration
**Components Used**: React plugin, path resolution for '@' alias
**Dependencies**: @vitejs/plugin-react

### `tailwind.config.js`
**Purpose**: Tailwind CSS configuration with custom design system
**Components Used**: Custom color palette (primary: #002F5C, accent: #FFC736), typography plugin
**Dependencies**: @tailwindcss/typography

### `tsconfig.*.json` (app, node, main)
**Purpose**: TypeScript compiler configuration for different environments
**Components Used**: Path mapping for '@' alias, strict type checking

### `eslint.config.js`
**Purpose**: ESLint configuration for code quality
**Dependencies**: TypeScript ESLint, React hooks plugin, React refresh plugin

### `postcss.config.js`
**Purpose**: PostCSS configuration for Tailwind CSS processing
**Dependencies**: Tailwind CSS, Autoprefixer

### `components.json`
**Purpose**: shadcn/ui component library configuration
**Components Used**: Radix UI primitives, Tailwind CSS integration

### `netlify.toml`
**Purpose**: Netlify deployment configuration
**Components Used**: Redirect rules for SPA routing, legacy URL redirects

---

## Source Code Structure (`src/`)

### Entry Points

#### `src/main.tsx`
**Purpose**: Application entry point and React DOM rendering
**Components Used**: React.StrictMode, BrowserRouter
**Dependencies**: React DOM, React Router DOM

#### `src/App.tsx`
**Purpose**: Main application component with routing logic
**Components Used**: Routes, Route, Navigate, Header, LandingPage, FormPage, NotFound
**Dependencies**: React Router DOM, analytics initialization

#### `src/index.css`
**Purpose**: Global CSS styles, Tailwind directives, and custom animations
**Components Used**: Tailwind base/components/utilities, custom keyframes, responsive design
**Tech Stack**: CSS3, Tailwind CSS

### Components (`src/components/`)

#### `src/components/LandingPage.tsx`
**Purpose**: Main marketing landing page with hero section and feature highlights
**Components Used**: Header, custom sections, Lucide icons (Trophy, GraduationCap, etc.)
**Dependencies**: React Router DOM navigation, react-swipeable
**Tech Stack**: Responsive design, SEO optimized

#### `src/components/FormPage.tsx`
**Purpose**: Form container page with header and footer layout
**Components Used**: Header, FormContainer
**Dependencies**: React, responsive layout

#### `src/components/Header.tsx`
**Purpose**: Navigation header with logo and responsive CTA button
**Components Used**: Sticky CTA functionality, scroll detection, responsive design
**Dependencies**: React Router DOM navigation
**Tech Stack**: Mobile-first responsive design

#### `src/components/NotFound.tsx`
**Purpose**: 404 error page component
**Components Used**: Link component, Lucide icons
**Dependencies**: React Router DOM

### Form Components (`src/components/forms/`)

#### `src/components/forms/FormContainer.tsx`
**Purpose**: Main form orchestrator managing 2-page form flow and evaluation animation
**Components Used**: Progress bar, InitialLeadCaptureForm, QualifiedLeadForm, DisqualifiedLeadForm, SequentialLoadingAnimation
**Dependencies**: Form validation, database operations, lead categorization, analytics tracking
**Tech Stack**: Complex state management, async operations

#### `src/components/forms/InitialLeadCaptureForm.tsx`
**Purpose**: Page 1 form collecting student info, academic details, and preferences
**Components Used**: React Hook Form, Zod validation, Select, Input, Label, sticky submit button
**Dependencies**: Form utilities, validation schemas, form tracking
**Tech Stack**: Advanced form handling with real-time validation

#### `src/components/forms/QualifiedLeadForm.tsx`
**Purpose**: Page 2A form for qualified leads with counseling booking functionality
**Components Used**: Calendar selection, time slot booking, counselor profiles, responsive layout
**Dependencies**: Dynamic time slot generation, counselor data management
**Tech Stack**: Complex UI logic, mobile-responsive design

#### `src/components/forms/DisqualifiedLeadForm.tsx`
**Purpose**: Page 2B form for disqualified leads with simple contact collection
**Components Used**: Minimal contact form, progress messaging
**Dependencies**: Form validation, lead categorization logic
**Tech Stack**: Simplified UX for non-qualified leads

### UI Components (`src/components/ui/`)

#### `src/components/ui/button.tsx`
**Purpose**: Reusable button component with multiple variants
**Components Used**: Radix UI Slot, class-variance-authority
**Dependencies**: Tailwind CSS, utility functions
**Tech Stack**: Component composition pattern

#### `src/components/ui/input.tsx`
**Purpose**: Enhanced input component with suffix support
**Components Used**: Forwardable refs, suffix rendering
**Dependencies**: Utility functions for styling
**Tech Stack**: Advanced input handling

#### `src/components/ui/select.tsx`
**Purpose**: Custom select dropdown component
**Components Used**: Radix UI Select primitives, Lucide icons
**Dependencies**: Radix UI, styling utilities
**Tech Stack**: Accessible dropdown implementation

#### `src/components/ui/label.tsx`
**Purpose**: Form label component
**Components Used**: Radix UI Label primitives
**Dependencies**: Radix UI, styling utilities

#### `src/components/ui/progress.tsx`
**Purpose**: Progress bar component for form steps
**Components Used**: Radix UI Progress primitives
**Dependencies**: Radix UI

#### `src/components/ui/dialog.tsx`
**Purpose**: Modal dialog component
**Components Used**: Radix UI Dialog primitives, Lucide icons
**Dependencies**: Radix UI

#### `src/components/ui/card.tsx`
**Purpose**: Card container components
**Components Used**: Multiple card sub-components (Header, Content, Footer)
**Dependencies**: Utility functions

#### `src/components/ui/toast.tsx`
**Purpose**: Toast notification system
**Components Used**: Custom toast implementation with variants
**Dependencies**: DOM manipulation, utility functions
**Tech Stack**: Imperative API for notifications

#### `src/components/ui/SequentialLoadingAnimation.tsx`
**Purpose**: Custom loading animation for form evaluation
**Components Used**: Step-based progress animation, custom keyframes
**Dependencies**: React state management, custom CSS animations
**Tech Stack**: Advanced CSS animations, timed sequences

### Libraries and Utilities (`src/lib/`)

#### `src/lib/database.ts`
**Purpose**: Supabase database connection and operations
**Components Used**: Supabase client, RPC function calls, health checks
**Dependencies**: @supabase/supabase-js, environment variables
**Tech Stack**: PostgreSQL, Supabase RPC, error handling

#### `src/lib/formTracking.ts`
**Purpose**: Incremental form data tracking and database operations
**Components Used**: Database upsert operations, funnel stage tracking
**Dependencies**: Supabase client, session management
**Tech Stack**: Real-time data persistence, funnel analytics

#### `src/lib/form.ts`
**Purpose**: Form submission, validation, and webhook integration
**Components Used**: Webhook payload creation, field name mapping, validation
**Dependencies**: Zod schemas, Make.com webhook integration
**Tech Stack**: API integration, data transformation

#### `src/lib/leadCategorization.ts`
**Purpose**: Business logic for lead categorization (BCH, Luminaire L1/L2, etc.)
**Components Used**: Complex conditional logic, qualification rules
**Dependencies**: Form data types, validation utilities
**Tech Stack**: Business rule engine

#### `src/lib/analytics.ts`
**Purpose**: Google Analytics integration for tracking
**Components Used**: GA4 event tracking, environment-based initialization
**Dependencies**: Google Analytics, environment detection
**Tech Stack**: Analytics tracking, conditional loading

#### `src/lib/dataValidation.ts`
**Purpose**: Data validation and sanitization utilities
**Components Used**: Lead category validation, error logging
**Dependencies**: Type definitions, error handling
**Tech Stack**: Data integrity management

#### `src/lib/formUtils.ts`
**Purpose**: Centralized form utilities for error handling and field focusing
**Components Used**: DOM manipulation, field focusing logic
**Dependencies**: Logging utilities
**Tech Stack**: DOM API, accessibility features

#### `src/lib/logger.ts`
**Purpose**: Conditional logging utility for development
**Components Used**: Environment-based logging, structured output
**Dependencies**: Environment variables
**Tech Stack**: Development debugging tools

#### `src/lib/utils.ts`
**Purpose**: General utility functions
**Components Used**: Class name merging utilities
**Dependencies**: clsx, tailwind-merge
**Tech Stack**: CSS utility functions

### State Management (`src/store/`)

#### `src/store/formStore.ts`
**Purpose**: Zustand store for form state management
**Components Used**: Form data persistence, step navigation, submission status
**Dependencies**: Zustand, form validation, session management
**Tech Stack**: Client-side state management

### Type Definitions (`src/types/`)

#### `src/types/form.ts`
**Purpose**: TypeScript type definitions for form data structures
**Components Used**: Enums, interfaces, type unions
**Dependencies**: Zod integration
**Tech Stack**: Type safety, compile-time validation

### Validation Schemas (`src/schemas/`)

#### `src/schemas/form.ts`
**Purpose**: Zod validation schemas for form data
**Components Used**: Schema definitions for each form page, validation rules
**Dependencies**: Zod, form types
**Tech Stack**: Runtime validation, type inference

### Environment Types (`src/vite-env.d.ts`)
**Purpose**: TypeScript declarations for Vite environment and global objects
**Components Used**: Window interface extensions, environment variables
**Tech Stack**: TypeScript declarations

---

## Documentation (`docs/`)

#### `docs/workflow-setup-v2.1.md`
**Purpose**: Comprehensive project setup and deployment workflow documentation
**Components Used**: Environment setup, Supabase configuration, Make.com integration
**Tech Stack**: Documentation for staging/production environments

#### `docs/data-flow-architecture.md`
**Purpose**: System architecture documentation (currently empty)
**Tech Stack**: System design documentation

---

## Public Assets (`public/`)

#### Static Images
- `public/vishy.png` - Counselor profile image
- `public/karthik.png` - Counselor profile image  
- `public/bh ig logo.png` - Beacon House logo
- `public/heroImage.webp` - Hero section image
- `public/lastCTAsectionBG.webp` - CTA section background

---

## Key Architecture Patterns

### 1. **Form Flow Management**
- Two-page form with conditional routing based on lead qualification
- Real-time validation with field-level error handling
- Incremental data saving for funnel analytics

### 2. **Database Integration**
- Dual-save architecture (Supabase + Make.com webhook)
- RPC functions for complex database operations
- Row Level Security (RLS) for data protection

### 3. **Responsive Design**
- Mobile-first approach with breakpoints at 577px, 1025px, 1441px
- Sticky UI elements for improved mobile experience
- Progressive disclosure of information

### 4. **State Management**
- Zustand for form state persistence
- Session-based tracking with unique identifiers
- Event-driven analytics integration

### 5. **Type Safety**
- Comprehensive TypeScript coverage
- Zod schemas for runtime validation
- Type inference from validation schemas

### 6. **Performance Optimizations**
- Lazy loading of components
- Optimized image formats (WebP)
- Efficient re-renders with React Hook Form

This architecture supports a scalable, maintainable university admissions lead capture system with robust data tracking and integration capabilities.